--
-- Test querying columnar tables.
--
CREATE SCHEMA columnar_join;
SET search_path to columnar_join, public;
-- Settings to make the result deterministic
SET datestyle = "ISO, YMD";
-- Query uncompressed data
SELECT count(*) FROM contestant;
 count 
-------
     8
(1 row)

SELECT avg(rating), stddev_samp(rating) FROM contestant;
          avg          |   stddev_samp    
-----------------------+------------------
 2344.3750000000000000 | 433.746119785032
(1 row)

SELECT country, avg(rating) FROM contestant WHERE rating > 2200
	GROUP BY country ORDER BY country;
 country |          avg          
---------+-----------------------
 XA      | 2203.0000000000000000
 XB      | 2610.5000000000000000
 XC      | 2236.0000000000000000
 XD      | 3090.0000000000000000
(4 rows)

SELECT * FROM contestant ORDER BY handle;
 handle | birthdate  | rating | percentile | country | achievements 
--------+------------+--------+------------+---------+--------------
 a      | 1990-01-10 |   2090 |       97.1 | XA      | {a}
 b      | 1990-11-01 |   2203 |       98.1 | XA      | {a,b}
 c      | 1988-11-01 |   2907 |       99.4 | XB      | {w,y}
 d      | 1985-05-05 |   2314 |       98.3 | XB      | {}
 e      | 1995-05-05 |   2236 |       98.2 | XC      | {a}
 f      | 1983-04-02 |   3090 |       99.6 | XD      | {a,b,c,y}
 g      | 1991-12-13 |   1803 |       85.1 | XD      | {a,c}
 h      | 1987-10-26 |   2112 |       95.4 | XD      | {w,a}
(8 rows)

-- all special column accesses should fail
SELECT ctid FROM contestant;
   ctid    
-----------
 (0,2)
 (0,3)
 (0,4)
 (0,5)
 (0,6)
 (515,137)
 (515,138)
 (515,139)
(8 rows)

SELECT cmin FROM contestant;
ERROR:  MIN / MAX TransactionID or CommandID not supported for ColumnarScan
SELECT cmax FROM contestant;
ERROR:  MIN / MAX TransactionID or CommandID not supported for ColumnarScan
SELECT xmin FROM contestant;
ERROR:  MIN / MAX TransactionID or CommandID not supported for ColumnarScan
SELECT xmax FROM contestant;
ERROR:  MIN / MAX TransactionID or CommandID not supported for ColumnarScan
SELECT tableid FROM contestant;
ERROR:  column "tableid" does not exist
LINE 1: SELECT tableid FROM contestant;
               ^
-- sample scans should fail
SELECT * FROM contestant TABLESAMPLE SYSTEM(0.1);
ERROR:  sample scans not supported on columnar tables
-- Query compressed data
SELECT count(*) FROM contestant_compressed;
 count 
-------
     8
(1 row)

SELECT avg(rating), stddev_samp(rating) FROM contestant_compressed;
          avg          |   stddev_samp    
-----------------------+------------------
 2344.3750000000000000 | 433.746119785032
(1 row)

SELECT country, avg(rating) FROM contestant_compressed WHERE rating > 2200
	GROUP BY country ORDER BY country;
 country |          avg          
---------+-----------------------
 XA      | 2203.0000000000000000
 XB      | 2610.5000000000000000
 XC      | 2236.0000000000000000
 XD      | 3090.0000000000000000
(4 rows)

SELECT * FROM contestant_compressed ORDER BY handle;
 handle | birthdate  | rating | percentile | country | achievements 
--------+------------+--------+------------+---------+--------------
 a      | 1990-01-10 |   2090 |       97.1 | XA      | {a}
 b      | 1990-11-01 |   2203 |       98.1 | XA      | {a,b}
 c      | 1988-11-01 |   2907 |       99.4 | XB      | {w,y}
 d      | 1985-05-05 |   2314 |       98.3 | XB      | {}
 e      | 1995-05-05 |   2236 |       98.2 | XC      | {a}
 f      | 1983-04-02 |   3090 |       99.6 | XD      | {a,b,c,y}
 g      | 1991-12-13 |   1803 |       85.1 | XD      | {a,c}
 h      | 1987-10-26 |   2112 |       95.4 | XD      | {w,a}
(8 rows)

-- Verify that we handle whole-row references correctly
SELECT to_json(v) FROM contestant v ORDER BY rating LIMIT 1;
                                                     to_json                                                      
------------------------------------------------------------------------------------------------------------------
 {"handle":"g","birthdate":"1991-12-13","rating":1803,"percentile":85.1,"country":"XD ","achievements":["a","c"]}
(1 row)

-- Test variables used in expressions
CREATE TABLE union_first (a int, b int) USING columnar;
CREATE TABLE union_second (a int, b int) USING columnar;
INSERT INTO union_first SELECT a, a FROM generate_series(1, 5) a;
INSERT INTO union_second SELECT a, a FROM generate_series(11, 15) a;
(SELECT a*1, b FROM union_first) union all (SELECT a*1, b FROM union_second);
 ?column? | b  
----------+----
        1 |  1
        2 |  2
        3 |  3
        4 |  4
        5 |  5
       11 | 11
       12 | 12
       13 | 13
       14 | 14
       15 | 15
(10 rows)

DROP TABLE union_first, union_second;
-- https://github.com/citusdata/citus/issues/4600
CREATE TABLE INT8_TBL_columnar(q1 int8, q2 int8) using columnar;
INSERT INTO INT8_TBL_columnar VALUES('  123   ','  456');
INSERT INTO INT8_TBL_columnar VALUES('123   ','4567890123456789');
INSERT INTO INT8_TBL_columnar VALUES('4567890123456789','123');
INSERT INTO INT8_TBL_columnar VALUES(+4567890123456789,'4567890123456789');
INSERT INTO INT8_TBL_columnar VALUES('+4567890123456789','-4567890123456789');
explain (costs off, summary off) select * from
  INT8_TBL_columnar a left join lateral
  (select b.q1 as bq1, c.q1 as cq1, least(a.q1,b.q1,c.q1) from
   INT8_TBL_columnar b cross join INT8_TBL_columnar c) ss
  on a.q2 = ss.bq1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Nested Loop Left Join
   ->  Custom Scan (ColumnarScan) on int8_tbl_columnar a
         Columnar Projected Columns: q1, q2
   ->  Nested Loop
         ->  Custom Scan (ColumnarScan) on int8_tbl_columnar b
               Filter: (a.q2 = q1)
               Columnar Projected Columns: q1
               Columnar Chunk Group Filters: (a.q2 = q1)
         ->  Materialize
               ->  Custom Scan (ColumnarScan) on int8_tbl_columnar c
                     Columnar Projected Columns: q1
(11 rows)

explain (costs off, summary off)
  SELECT COUNT(*) FROM INT8_TBL_columnar t1 JOIN
  LATERAL (SELECT * FROM INT8_TBL_columnar t2 WHERE t1.q1 = t2.q1)
  as foo ON (true);
                              QUERY PLAN                              
----------------------------------------------------------------------
 Aggregate
   ->  Hash Join
         Hash Cond: (t2.q1 = t1.q1)
         ->  Custom Scan (ColumnarScan) on int8_tbl_columnar t2
               Columnar Projected Columns: q1
         ->  Hash
               ->  Custom Scan (ColumnarScan) on int8_tbl_columnar t1
                     Columnar Projected Columns: q1
(8 rows)

CREATE TABLE INT8_TBL_heap (LIKE INT8_TBL_columnar) USING heap;
INSERT INTO INT8_TBL_heap SELECT * FROM INT8_TBL_columnar;
CREATE TABLE result_columnar AS
select * from
  INT8_TBL_columnar a left join lateral
  (select b.q1 as bq1, c.q1 as cq1, least(a.q1,b.q1,c.q1) from
   INT8_TBL_columnar b cross join INT8_TBL_columnar c) ss
  on a.q2 = ss.bq1;
CREATE TABLE result_regular AS
select * from
  INT8_TBL_heap a left join lateral
  (select b.q1 as bq1, c.q1 as cq1, least(a.q1,b.q1,c.q1) from
   INT8_TBL_heap b cross join INT8_TBL_heap c) ss
  on a.q2 = ss.bq1;
-- 2 results should be identical, so the following should be empty
(table result_columnar EXCEPT table result_regular)
UNION
(table result_regular EXCEPT table result_columnar);
 q1 | q2 | bq1 | cq1 | least 
----+----+-----+-----+-------
(0 rows)

SET client_min_messages TO WARNING;
DROP SCHEMA columnar_join CASCADE;
--
-- https://github.com/citusdata/citus/issues/5258
--
set default_table_access_method to columnar;
CREATE TABLE atest1 ( a int, b text );
CREATE TABLE atest2 (col1 varchar(10), col2 boolean);
INSERT INTO atest1 VALUES (1, 'one');
SELECT * FROM atest1; -- ok
 a |  b  
---+-----
 1 | one
(1 row)

SELECT * FROM atest2; -- ok
 col1 | col2 
------+------
(0 rows)

INSERT INTO atest1 VALUES (2, 'two'); -- ok
INSERT INTO atest1 SELECT 1, b FROM atest1; -- ok
SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
 col1 | col2 
------+------
(0 rows)

DROP TABLE atest1;
DROP TABLE atest2;
set default_table_access_method to default;
create temp table t1 (f1 numeric(14,0), f2 varchar(30)) USING columnar;
select * from
  (select distinct f1, f2, (select f2 from t1 x where x.f1 = up.f1) as fs
   from t1 up) ss
group by f1,f2,fs;
 f1 | f2 | fs 
----+----+----
(0 rows)

drop table t1;
CREATE TABLE tbl1(c0 int4range) USING COLUMNAR;
CREATE TABLE tbl2(c0 int4range);
INSERT INTO tbl1(c0) VALUES('[0,1]'::int4range);
INSERT INTO tbl1(c0) VALUES('[0,1]'::int4range);
SELECT tbl1.c0 FROM tbl1 JOIN tbl2 ON tbl1.c0=tbl2.c0 WHERE tbl2.c0<=tbl2.c0 ISNULL;
 c0 
----
(0 rows)

DROP TABLE tbl1;
DROP TABLE tbl2;
--
-- [columnar] Handle NULL rows with vectorized execution
--
CREATE TABLE t (a INT, b TEXT) USING columnar;
INSERT INTO t SELECT 1 FROM generate_series(0,100000) AS g;
INSERT INTO t SELECT 1, 'abc' || g FROM generate_series(0,100000) AS g;
EXPLAIN (analyze off, costs off, timing off, summary off)
SELECT * FROM t WHERE a = 1 ORDER BY b LIMIT 1;
                         QUERY PLAN                         
------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: b
         ->  Gather
               Workers Planned: 1
               ->  Parallel Custom Scan (ColumnarScan) on t
                     Columnar Projected Columns: a, b
                     Columnar Chunk Group Filters: (a = 1)
                     Columnar Vectorized Filter: (a = 1)
(9 rows)

SELECT * FROM t WHERE a = 1 ORDER BY b LIMIT 1;
 a |  b   
---+------
 1 | abc0
(1 row)

DROP TABLE t;
--
-- [columnar] WHERE on INTEGER column not working when SELECT includes certain custom types
--
CREATE TABLE t(a INT, b point, c TEXT) USING columnar;
INSERT INTO t SELECT g, point(1, g), 'abc_' || g FROM generate_series(0,100) AS g;
EXPLAIN (analyze off, costs off, timing off, summary off)
SELECT * FROM t WHERE a >= 90;
                QUERY PLAN                 
-------------------------------------------
 Custom Scan (ColumnarScan) on t
   Columnar Projected Columns: a, b, c
   Columnar Chunk Group Filters: (a >= 90)
   Columnar Vectorized Filter: (a >= 90)
(4 rows)

SELECT * FROM t WHERE a >= 90;
  a  |    b    |    c    
-----+---------+---------
  90 | (1,90)  | abc_90
  91 | (1,91)  | abc_91
  92 | (1,92)  | abc_92
  93 | (1,93)  | abc_93
  94 | (1,94)  | abc_94
  95 | (1,95)  | abc_95
  96 | (1,96)  | abc_96
  97 | (1,97)  | abc_97
  98 | (1,98)  | abc_98
  99 | (1,99)  | abc_99
 100 | (1,100) | abc_100
(11 rows)

DROP TABLE t;
--
-- [columnar] Test chunk_group_row_limit
--
CREATE TABLE t(a INT) USING columnar;
SELECT columnar.alter_columnar_table_set('t', chunk_group_row_limit => '11000');
 alter_columnar_table_set 
--------------------------
 
(1 row)

INSERT INTO t SELECT a FROM generate_series(0,50000) AS a;
SELECT count(*) FROM t;
 count 
-------
 50001
(1 row)

DROP TABLE t;
--
-- [columnar] Bug #244
--
CREATE TABLE t(a INT, b TEXT) USING columnar;
SELECT columnar.alter_columnar_table_set('t', chunk_group_row_limit => '11000');
 alter_columnar_table_set 
--------------------------
 
(1 row)

INSERT INTO t SELECT a, md5(b::text) FROM generate_series(0,50000) AS t1(a)
JOIN LATERAL generate_series(1, 10) AS t2(b) ON (true);
SELECT b, count(*) FROM t WHERE a > 50 AND b <> '' GROUP BY b ORDER BY b;
                b                 | count 
----------------------------------+-------
 1679091c5a880faf6fb5e6087eb1b2dc | 49950
 45c48cce2e2d7fbdea1afc51c7c6ad26 | 49950
 8f14e45fceea167a5a36dedd4bea2543 | 49950
 a87ff679a2f3e71d9181a67b7542122c | 49950
 c4ca4238a0b923820dcc509a6f75849b | 49950
 c81e728d9d4c2f636f067f89cc14862c | 49950
 c9f0f895fb98ab9159f51fd0297e236d | 49950
 d3d9446802a44259755d38e6d163e820 | 49950
 e4da3b7fbbce2345d7772b0674a318d5 | 49950
 eccbc87e4b5ce2fe28308fd9f2a7baf3 | 49950
(10 rows)

DROP TABLE t;
